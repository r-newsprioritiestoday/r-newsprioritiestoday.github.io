{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","selectedDate","moment","_this2","fetch","then","response","json","d","key","_default","hasOwnProperty","date_string","datetime","date_object","replace","push","setState","catch","error","console","log","date","date_before","subtract","filter","isBetween","selected_data","i","length","getDataSet","fetchTranslations","forEach","element","_objectSpread2","index","findIndex","item","link","objectSpread","defineProperty","headline","text","_this3","_this$state","data_set","react_default","a","createElement","material_ui_pickers_esm","utils","MomentUtils","Typography_default","variant","gutterBottom","align","style","paddingTop","Grid_default","container","direction","justify","alignItems","xs","width","margin","paddingBottom","value","onChange","label","showTodayButton","map","Paper_default","padding","country","articles","slice","article","Link_default","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.891c8ba3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers';\nimport { DateTimePicker } from \"material-ui-pickers\";\n\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\n\n\n// pick utils\nimport MomentUtils from '@date-io/moment';\nimport moment from 'moment'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      data: [],\n      selectedDate: moment()\n    }\n  }\n\n  componentDidMount(){\n\n    // get current data and convert datetime to moment object\n    fetch('https://raw.githubusercontent.com/r-newsprioritiestoday/newsprioritiestoday-data/master/db.json')\n      .then(response => response.json())\n      .then(data => { \n        var d = []\n        for(var key in data._default){\n          if(data._default.hasOwnProperty(key)){\n            let date_string = data._default[key].datetime\n            let date_object = moment(date_string.replace('{TinyDate}:', ''))\n            data._default[key].datetime = date_object\n            d.push(data._default[key])\n          }\n        }\n        this.setState({data: d})\n      })\n      .catch(error => console.log(error))\n  }\n\n  // get only the data that was collected at the currently selected date (1 hour before)\n  getDataSet(selectedDate, data){\n    const date = moment(selectedDate)\n    const date_before = moment(selectedDate).subtract(1, 'hour')\n    console.log(date, date_before)\n    return data.filter((d) => {\n      return d.datetime.isBetween(date_before, date)\n    })\n  }\n\n  fetchTranslations(selected_data){\n    for(let i = 0; i < selected_data.length; i++){\n      \n    }\n  }\n\n  // THIS IS WRONG!!!! The data set contains an array of articles. You must access this to replace the translations\n\n  // translate the news that are currently shown\n  translateCurrentNews(selectedDate){\n    let { data } = this.state\n    const selected_data = this.getDataSet(selectedDate, data);\n    \n    const translated_data = this.fetchTranslations(selected_data)\n\n    // replace all texts with the translated entries\n    // first go through all data\n    translated_data.forEach(element => {\n      // find the index the data is at in the original array\n      const index = data.findIndex(item => item.link === element.link)\n\n      // create a new item with all original values and replace the values that have been translated\n      let item = {\n        ...data[index],\n        [\"headline\"]: element.headline,\n        [\"text\"]: element.text\n      }\n\n      // put the new item at the same place the original item was at\n      data[index] = item\n    });\n\n    // once you are finished, set the state with the new array\n    this.setState({\n      data\n    })\n  }\n\n  render() {\n    const { selectedDate, data } = this.state\n    \n    const data_set = this.getDataSet(selectedDate, data)\n\n\n    return (\n      <div>\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n          <Typography variant=\"h2\" gutterBottom align=\"center\" style={{paddingTop: '1%'}}>\n            NEWS PRIORITIES TODAY\n          </Typography>\n          <Grid container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"stretch\">\n            <Grid item xs={12} style={{width: '50%', margin: '0 auto', paddingBottom: '20px'}}>\n              <DateTimePicker\n                value={selectedDate}\n                onChange={(date) => this.setState({selectedDate: date})}\n                label=\"Select News Date\"\n                showTodayButton\n                style={{width: '100%'}}\n                \n                />\n                \n            </Grid>\n            {/**<Button onClick={this.translateCurrentNews.bind(this)}>Translate Current News</Button>  */}\n            <hr/>\n            {data_set.map(data => {\n              return (\n                <Grid item xs={12} >\n                  <Paper style={{padding: '20px', margin: '5px'}}>\n                    <Typography variant=\"h4\" gutterBottom>\n                      {data.country}\n                    </Typography>\n                    <ul>\n                      {data.articles.slice(0,5).map((article) => {\n                        return(\n                          <li key={article.link}>\n                            <Typography variant=\"body1\" gutterBottom>\n                              {article.headline + \" - \" + article.text}\n                            </Typography>\n                          </li>\n                        )\n                      })}\n                    </ul>\n\n                  </Paper>\n                </Grid>\n              )\n            })}\n          </Grid>    \n          (c)2019, visit {<Link href={\"https://www.reddit.com/r/newsprioritiestoday/\"}>/r/newsprioritiestoday</Link>} for more information     \n        </MuiPickersUtilsProvider>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}