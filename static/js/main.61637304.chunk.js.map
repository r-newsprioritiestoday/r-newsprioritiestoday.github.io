{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","selectedDate","moment","_this2","fetch","then","response","json","d","key","_default","hasOwnProperty","date_string","datetime","date_object","replace","push","setState","catch","error","console","log","date","date_before","subtract","filter","isBetween","_this3","_this$state","data_set","getDataSet","react_default","a","createElement","style","width","margin","material_ui_pickers_esm","utils","MomentUtils","Typography_default","variant","gutterBottom","Grid_default","container","direction","justify","alignItems","item","xs","paddingBottom","value","onChange","label","showTodayButton","map","Paper_default","padding","country","articles","slice","article","link","headline","text","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61637304.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers';\nimport { DateTimePicker } from \"material-ui-pickers\";\n\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\n\n// pick utils\nimport MomentUtils from '@date-io/moment';\nimport moment from 'moment'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      data: [],\n      selectedDate: moment()\n    }\n  }\n\n  componentDidMount(){\n\n    // get current data and convert datetime to moment object\n    fetch('https://raw.githubusercontent.com/r-newsprioritiestoday/newsprioritiestoday-data/master/db.json')\n      .then(response => response.json())\n      .then(data => { \n        var d = []\n        for(var key in data._default){\n          if(data._default.hasOwnProperty(key)){\n            let date_string = data._default[key].datetime\n            let date_object = moment(date_string.replace('{TinyDate}:', ''))\n            data._default[key].datetime = date_object\n            d.push(data._default[key])\n          }\n        }\n        this.setState({data: d})\n      })\n      .catch(error => console.log(error))\n  }\n\n  // get only the data that was collected at the currently selected date (1 hour before)\n  getDataSet(selectedDate, data){\n    const date = moment(selectedDate)\n    const date_before = moment(selectedDate).subtract(1, 'hour')\n    console.log(date, date_before)\n    return data.filter((d) => {\n      if (d.datetime.isBetween(date_before, date)){\n        console.log('hi')\n      }\n      return d.datetime.isBetween(date_before, date)\n    })\n  }\n\n  render() {\n    const { selectedDate, data } = this.state\n    \n    const data_set = this.getDataSet(selectedDate, data)\n\n\n    return (\n      <div style={{width: '50%', margin: '0 auto'}}>\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n          <Typography variant=\"h2\" gutterBottom>\n            NEWS PRIORITIES TODAY\n          </Typography>\n          <Grid container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"stretch\">\n            <Grid item xs={12} style={{width: '50%', margin: '0 auto', paddingBottom: '20px'}}>\n              <DateTimePicker\n                value={selectedDate}\n                onChange={(date) => this.setState({selectedDate: date})}\n                label=\"Select News Date\"\n                showTodayButton\n                \n                />\n            </Grid>\n            <hr/>\n            {data_set.map(data => {\n              return (\n                <Grid item xs={12} >\n                  <Paper style={{padding: '20px', margin: '5px'}}>\n                    <Typography variant=\"h4\" gutterBottom>\n                      {data.country}\n                    </Typography>\n                    <ul>\n                      {data.articles.slice(0,5).map((article) => {\n                        return(\n                          <li key={article.link}>\n                            <Typography variant=\"body1\" gutterBottom>\n                              {article.headline + \" - \" + article.text}\n                            </Typography>\n                          </li>\n                        )\n                      })}\n                    </ul>\n\n                  </Paper>\n                </Grid>\n              )\n            })}\n          </Grid>          \n        </MuiPickersUtilsProvider>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}